{"name":"Rx4DDS","tagline":"Reactive Extensions Adapters for RTI Connext DDS","body":"![Rx4DDS](https://rtidds.files.wordpress.com/2014/03/rx3dds.png)\r\n\r\n### What's Rx4DDS\r\nRx4DDS is a research library that integrates Reactive Extensions (Rx) with RTI Connext DDS in C++11, C#, and JavaScript. Rx and DDS are quite complementary because Rx is based on the Observable-Observer pattern, which is analogous to the publish-subscribe pattern of DDS. Furthermore, the core tenet of Rx composition of operations over values that change over time complements DDS instances, which are data objects that change over time. DDS ensures propagation of changes to the interested remote participants. Consequently, combining Rx with DDS enables a coherent end-to-end distributed asynchronous dataflow architecture for both data distribution (which is performed by DDS) and processing (which is done by Rx). Rx and DDS together support location transparency of dataflow-style programs seamlessly. The resulting applications dramatically simplify concurrency to the extent that it can be simply configured.\r\n\r\n### Status\r\nThe Rx4DDS adapters are research prototypes. RxJS adapter works with RTI Connext DDS Node.js Connector. The C# codebase also includes an implementation of the [DEBS'13 Grand Challenge](http://www.orgs.ttu.edu/debs2013/index.php?goto=cfchallengedetails) using DDS and Rx.NET.\r\n\r\n### Further Reading\r\n- DEBS'15 Research paper [Functional Reactive Stream Processing for Data-centric Publish/Subscribe](https://community.rti.com/paper/reactive-stream-processing-data-centric-publishsubscribe)\r\n- DEBS'15 Research paper [presentation](https://community.rti.com/presentation/reactive-stream-processing-data-centric-publishsubscribe)\r\n- A slightly older research paper [Scalable Reactive Stream Processing Using DDS and Rx](http://community.rti.com/paper/scalable-reactive-stream-processing-using-dds-and-rx) \r\n- Silicon Valley Code Camp [presentation](http://www.slideshare.net/SumantTambe/reactive-stream-processing-using-dds-and-rx)\r\n- Silicon Valley Code Camp [video](https://vimeo.com/108753792)\r\n- First Rx4DDS.NET [blogpost](http://blogs.rti.com/2014/04/09/reactive-programming-using-rx4dds/)\r\n- [OMG DDS portal](http://portals.omg.org/dds/)\r\n- [RTI Connext DDS](https://www.rti.com/products/dds)\r\n- [RTI YouTube Channel](https://www.youtube.com/user/RealTimeInnovations)\r\n\r\n### Data Transformation using Map \r\nDemonstrates a stateful transformation pipeline. Transforms \"Square\" topic to \"Circle\" and \"Triangle\" topics. Blue circle orbits around the square, and blue triangle orbits around the blue circle. \r\n\r\n![Blue Shapes Solar-System](https://www.youtube.com/embed/mHNyEPeOPHg)\r\n\r\n```cpp\r\n  rx4dds::TopicSubscription<ShapeType> \r\n      topic_sub(participant, \"Square\", waitset, worker);\r\n  rx::observable<LoanedSample<ShapeType>> source =\r\n      topic_sub.create_observable();\r\n  rx::observable<ShapeType> square_track = \r\n    source >> rx4dds::complete_on_dispose()\r\n           >> rx4dds::error_on_no_alive_writers()\r\n           >> filter([](LoanedSample<ShapeType> s) {\r\n                 return s.info().valid();\r\n              }) // skip invalid samples\r\n           >> map([](LoanedSample<ShapeType> valid) {\r\n                 return valid.data();\r\n              }); // map samples to data\r\n\r\n  int circle_degree = 0;\r\n  square_track\r\n    .map([circle_degree](ShapeType & square) mutable \r\n    {\r\n      circle_degree = (circle_degree + 3) % 360;\r\n      return shape_location(square, circle_degree);\r\n    })\r\n    .tap([circle_writer](ShapeType & circle) mutable {\r\n            circle_writer.write(circle);\r\n    }); // tap replaced as publish_over_dds later\r\n\r\n  int tri_degree = 0;\r\n  circle_track\r\n    .map([tri_degree](ShapeType & circle) mutable \r\n    {\r\n      tri_degree = (tri_degree + 9) % 360;\r\n      return shape_location(circle, tri_degree);\r\n    })\r\n    >> rx4dds::publish_over_dds(triangle_writer);\r\n\r\n  triangle_track.subscribe();\r\n```\r\n\r\n### Keyed Data Transformation using GroupBy and Map \r\nDemonstrates multiple parallel stateful pipelines. Same as before but the transformation pipeline is replicated for each key (i.e., shape color). The resulting topics (\"Circle\" and \"Triangle\") mimic the lifecycle of the original instance in \"Square\" topic. DDS dispose maps to on_completed and NOT_ALIVE_NO_WRITERS instance-state maps to on_error.\r\n\r\n![Parallel Keyed Shapes Solar-Systems](https://www.youtube.com/embed/2Pz91e7yR5I)\r\n\r\n```cpp\r\nrx4dds::TopicSubscription<ShapeType> \r\n\ttopic_sub(participant, \"Square\", waitset, worker);\r\nauto grouped_stream =\r\n  topic_sub.create_observable() \r\n      >> rx4dds::group_by_instance ([](ShapeType & shape) { \r\n            return shape.color(); \r\n         });\r\ngrouped_stream\r\n  .flat_map([circle_writer, triangle_writer]\r\n            (GroupedShapeObservable go) {\r\n   rx::observable<ShapeType> inner_transformed =\r\n        go >> rx4dds::to_unkeyed()\r\n           >> rx4dds::complete_on_dispose()\r\n           >> rx4dds::error_on_no_alive_writers()\r\n           >> rx4dds::skip_invalid_samples()\r\n           >> rx4dds::map_samples_to_data()\r\n           >> rx4dds::map_to_circle_track() // as shown before\r\n           >> rx4dds::publish_over_dds(\r\n                 circle_writer, ShapeType(go.key())\r\n           >> rx4dds::map_to_triangle_track() // as shown before\r\n           >> rx4dds::publish_over_dds(\r\n                 triangle_writer, ShapeType(go.key());\r\n     return inner_transformed;\r\n  }).subscribe();\r\n```\r\n\r\n### Average of Multiple Topic Instances \r\nDemonstrates dynamic correlation (average) of \"Square\" topic instances. Incorporates lifecycle (appearance and disappearance) of \"Square\" topic instances. As before, DDS dispose maps to on_completed and NOT_ALIVE_NO_WRITERS instance-state maps to on_error.\r\n\r\n![Average of Multiple Square Instances](https://www.youtube.com/embed/tZutExU6r0w)\r\n\r\n```cpp\r\nrx4dds::TopicSubscription<ShapeType> \r\n\ttopic_sub(participant, \"Square\", waitset, worker);\r\nauto grouped_stream =\r\n  topic_sub.create_observable() \r\n      >> rx4dds::group_by_instance ([](ShapeType & shape) { \r\n            return shape.color(); \r\n         });\r\ngrouped_stream\r\n  .map([](GroupedShapeObservable go) {\r\n    return go >> rx4dds::to_unkeyed()\r\n              >> rx4dds::complete_on_dispose()\r\n              >> rx4dds::error_on_no_alive_writers()\r\n              >> rx4dds::skip_invalid_samples()\r\n              >> rx4dds::map_samples_to_data()\r\n              >> publish()\r\n              >> ref_count()\r\n              >> as_dynamic();\r\n })\r\n >> rx4dds::coalesce_alive()\r\n >> rxcpp::map([](const vector<rxcpp::observable<ShapeType>> & srcs) {\r\n      return rx4dds::combine_latest(srcs);\r\n    })\r\n >> rxcpp::switch_on_next()\r\n >> rxcpp::map([](const std::vector<ShapeType> & shapes) {\r\n         return calculate_average(shapes);\r\n    })\r\n >> rx4dds::publish_over_dds(triangle_writer, ShapeType(“ORANGE”));\r\n```","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}